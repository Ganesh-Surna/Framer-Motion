============ 1. intro ==================
import { motion } from 'framer-motion';

function App() {
  const [x, setX] = useState(0);
  const [y, setY] = useState(0);
  const [rotate, setRotate] = useState(0);

  return (
    <div id="demo">
      <motion.div id="box"
          animate={{x,y,rotate}}
          transition={{
            duration:0.3,
            // bounce:0,
            type:"spring",
          }}
      />

============== 2. Animating between conditional values ===============
<motion.span className="challenge-item-details-icon"
    animate={{ rotate: isExpanded ? 180 : 0 }}
>
    &#9650;
</motion.span>


==================== 3. Animating when a component added to DOM (means when it appears --- ex: Modal) ===============
import { createPortal } from 'react-dom';
import { motion } from 'framer-motion';

export default function Modal({ title, children, onClose }) {
  return createPortal(
    <>
      <div className="backdrop" onClick={onClose} />
      <motion.dialog open className="modal" 
        initial={{ opacity:0, y: 100 }}
        animate={{ opacity:1, y:0 }}
      >
        <h2>{title}</h2>
        {children}
      </motion.dialog>
    </>,
    document.getElementById('modal')
  );
}

======================= 4. Animating when disappearing =========================
<motion.dialog open className="modal" 
        initial={{ opacity:0, y: 100 }}
        animate={{ opacity:1, y:0 }}
        exit={{ opacity:0, y: -100, }}
  >


------------ wrapping the code causing this component disappear ----------
import NewChallenge from './NewChallenge.jsx';
import { AnimatePresence } from 'framer-motion';

export default function Header() {
  const [isCreatingNewChallenge, setIsCreatingNewChallenge] = useState();

  function handleStartAddNewChallenge() {
    setIsCreatingNewChallenge(true);
  }

  function handleDone() {
    setIsCreatingNewChallenge(false);
  }

  return (
    <>
      <AnimatePresence>
          {isCreatingNewChallenge && <NewChallenge onDone={handleDone} />}
      </AnimatePresence>


================= 5. Animate While Hover ==================
<motion.button
  whileHover={{scale:1.1}}
  transition={{ type:"spring", stiffness:500, mass:1 }}
  onClick={handleStartAddNewChallenge}
  className="button">
  Add Challenge
</motion.button>



================ 6. reusing animation states => variants prop  ================
<motion.dialog open className="modal" 
    variants={{
      hidden: { opacity:0, y: 100 },
      visible: { opacity:1, y:0 }
    }}
    initial="hidden"
    animate="visible"
    exit="hidden"
>


================= 7. nested animations and variants ===================
-----------parent-------------
<motion.dialog open className="modal" 
      variants={{
        hidden: { opacity:0, y: 30 },
        visible: { opacity:1, y:0 }
      }}
      initial="hidden"
      animate="visible"
      exit="hidden"
  >
      <h2>{title}</h2>
      {children}
</motion.dialog>


---------child----------
<Modal title="New Challenge" onClose={onDone}>
      <form id="new-challenge" onSubmit={handleSubmit}>
        <ul id="new-challenge-images">
          {images.map((image) => (
            <motion.li
              variants={{
                hidden: {  opacity:0, scale:0.5 },
                visible: { opacity:1, scale:1 }
              }}
              exit={{ opacity:1, scale:1 }}
              key={image.alt}
              onClick={() => handleSelectImage(image)}
              className={selectedImage === image ? 'selected' : undefined}
            >
              <img {...image} />
            </motion.li>
          ))}
        </ul>
      </form>
    </Modal>


=================== 8. staggering animation for list of items  =======================
<motion.ul
      variants={{
        visible: { transition : { staggerChildren: 0.05 } }
      }}
      id="new-challenge-images"
  >
    {images.map((image) => (
      <motion.li
        variants={{
          hidden: {  opacity:0, scale:0.5 },
          visible: { opacity:1, scale:1 }
        }}
        exit={{ opacity:1, scale:1 }}
        key={image.alt}
        onClick={() => handleSelectImage(image)}
        className={selectedImage === image ? 'selected' : undefined}
      >
        <img {...image} />
      </motion.li>
    ))}
  </motion.ul>


--------------------------------Example----------------------------
        <motion.ul
         variants={{
          hidden:{y:-20, opacity:0},
          visible: {transition: {staggerChildren: 0.05}, y:0, opacity:1}
         }}
         initial="hidden"
         animate="visible"
          <AnimatePresence>
          {filteredList.map((item) => {
            return (
              <motion.li layout
                variants={{
                  hidden:{ opacity: 0, scale: 0.5},
                  visible: { opacity: 1, scale: 1,}
                }}
                // initial="hidden"
                // animate="visible"
                exit={{ opacity: 1, scale: 1 }}
                onClick={()=>handleShowDetails(item)}
                key={item.id}
              >


================ 9. Animating colors =======================
<motion.button
      whileHover={{ scale:1.1, backgroundColor:"purple" }} <=========
      transition={{ type:"spring", stiffness:500, mass:1 }}


================ 10. setting keyframes as values to properties ==================
<motion.li
      variants={{
        hidden: {  opacity:0, scale:0.5 },
        visible: { opacity:1, scale:[0.8, 1.3, 1] }  ========[0.8, 1.3, 1]=======
      }}


=============== 11. IMPERATIVE ANIMATIONS ==================
import { motion, stagger, useAnimate } from 'framer-motion';
....
const [ scope, animate ] = useAnimate();
....
if (
      !challenge.title.trim() ||
      !challenge.description.trim() ||
      !challenge.deadline.trim() ||
      !challenge.image
    ) {
      animate( <=============== here =================
        "input, textarea",
        { x : [-15, 0, 15, 0] },
        { type:"spring", duration:0.2, delay: stagger(0.05) }
      )
      return;
    }
....
<form ref={scope}>



=============== 12. ANIMATING LAYOUT CHANGES ===============
<motion.li layout>
.....
</motion.li>



============== 13. AnimatePresence WITH MULTIPLE ELEMENTS ==============

<AnimatePresence mode="wait">  ======================> mode="sync" by default
    {displayedChallenges.length > 0 && (
      <motion.ol
        key="list"  =============================> 1st element in AnimatePresence
        exit={{ opacity: 0, y: -30 }}
        className="challenge-items"
      >
        {displayedChallenges.map((challenge) => (
          <ChallengeItem
            key={challenge.id}
            challenge={challenge}
            onViewDetails={() => handleViewDetails(challenge.id)}
            isExpanded={expanded === challenge.id}
          />
        ))}
      </motion.ol>
    )}
    {displayedChallenges.length === 0 && (
            <motion.p
              initial={{ opacity: 0, y: -20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              key="fallback"    =============================> 2st element in AnimatePresence
            >
                  No challenges found.
            </motion.p>
    )}
</AnimatePresence>



================== 14. COMBININGANIMATIONS WITH LAYOUT ANIMATIONS TO PREVENT WOBBLE EFFRCT ================
<motion.li layout>
.....
<AnimatePresence>
    {isExpanded && (
      <motion.div
          initial={{ height: 0, opacity: 0 }}
          animate={{ height: "auto", opacity: 1 }}
          exit={{ height: 0, opacity: 0 }}
      >
        <p className="challenge-item-description">
          {challenge.description}
        </p>
      </motion.div>
    )}
</AnimatePresence>
....
</motion.li>



================== 15. ANIMATING SHARED COMPONENTS/ELEMENTS ====================
{isSelected && <motion.div layoutId='active-tab-indicator'/>}



================== 16. RE-TRIGGERING ANIMATIONS VIA keys =================
<Badge key={badgeCaption} caption={badgeCaption}/>  =========> setting key dynamically

------------ IN Badge.js ---------------
import { motion } from "framer-motion";

export default function Badge({ caption }) {
  return (
    <motion.span
      animate={{ scale: [1, 1.2, 1] }}
      transition={{ duration: 0.3 }}
      className="badge"
    >
      {caption}
    </motion.span>
  );
}


===================== 17. ANIMATING ON SCROLLING =====================
import { motion, useScroll, useTransform } from "framer-motion";

export default function WelcomePage() {
  const { scrollY } = useScroll();

  const yCity = useTransform(scrollY, [0, 200], [0, -100]);
  const opacityCity = useTransform(
    scrollY,
    [0, 200, 300, 500],
    [1, 0.5, 0.5, 0]
  );

  const yHero = useTransform(scrollY, [0, 200], [0, -200]);
  const opacityHero = useTransform(scrollY, [0, 300, 500], [1, 1, 0]);

  const yText = useTransform(scrollY, [0, 200, 300, 400, 500], [0, 50, 70, 200, 300]);
  const scaleText = useTransform(scrollY, [0, 500], [1, 1.5]);
.....
        <motion.div
          style={{ y: yText, scale: scaleText }}
          id="welcome-header-content"
        >
          <h1>Ready for a challenge?</h1>
          <Link id="cta-link" to="/challenges">
            Get Started
          </Link>
        </motion.div>
        <motion.img
          style={{ y: yCity, opacity: opacityCity }}
          src={cityImg}
          alt="A city skyline touched by sunlight"
          id="city-image"
        />
        <motion.img
          style={{ y: yHero, opacity: opacityHero }}
          src={heroImg}
          alt="A superhero wearing a cape"
          id="hero-image"
        />
