============ 1. intro ==================
import { motion } from 'framer-motion';

function App() {
  const [x, setX] = useState(0);
  const [y, setY] = useState(0);
  const [rotate, setRotate] = useState(0);

  return (
    <div id="demo">
      <motion.div id="box"
          animate={{x,y,rotate}}
          transition={{
            duration:0.3,
            // bounce:0,
            type:"spring",
          }}
      />

============== 2. Animating between conditional values ===============
<motion.span className="challenge-item-details-icon"
    animate={{ rotate: isExpanded ? 180 : 0 }}
>
    &#9650;
</motion.span>


==================== 3. Animating when a component added to DOM (means when it appears --- ex: Modal) ===============
import { createPortal } from 'react-dom';
import { motion } from 'framer-motion';

export default function Modal({ title, children, onClose }) {
  return createPortal(
    <>
      <div className="backdrop" onClick={onClose} />
      <motion.dialog open className="modal" 
        initial={{ opacity:0, y: 100 }}
        animate={{ opacity:1, y:0 }}
      >
        <h2>{title}</h2>
        {children}
      </motion.dialog>
    </>,
    document.getElementById('modal')
  );
}

======================= 4. Animating when disappearing =========================
<motion.dialog open className="modal" 
        initial={{ opacity:0, y: 100 }}
        animate={{ opacity:1, y:0 }}
        exit={{ opacity:0, y: -100, }}
  >


------------ wrapping the code causing this component disappear ----------
import NewChallenge from './NewChallenge.jsx';
import { AnimatePresence } from 'framer-motion';

export default function Header() {
  const [isCreatingNewChallenge, setIsCreatingNewChallenge] = useState();

  function handleStartAddNewChallenge() {
    setIsCreatingNewChallenge(true);
  }

  function handleDone() {
    setIsCreatingNewChallenge(false);
  }

  return (
    <>
      <AnimatePresence>
          {isCreatingNewChallenge && <NewChallenge onDone={handleDone} />}
      </AnimatePresence>


================= Animate While Hover ==================
<motion.button
  whileHover={{scale:1.1}}
  transition={{ type:"spring", stiffness:500, mass:1 }}
  onClick={handleStartAddNewChallenge}
  className="button">
  Add Challenge
</motion.button>



================ reusing animation states => variants prop  ================
<motion.dialog open className="modal" 
    variants={{
      hidden: { opacity:0, y: 100 },
      visible: { opacity:1, y:0 }
    }}
    initial="hidden"
    animate="visible"
    exit="hidden"
>
